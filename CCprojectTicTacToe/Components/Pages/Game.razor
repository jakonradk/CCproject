@page "/game"
@inject NavigationManager NavManager
@inject CCproject.DatabaseConnect db
@implements IDisposable

<p>@opponent_info @opponent</p>

<div id="start">
	<button id="spots" @onclick=spot11>@spot11value</button>
	<button id="spots" @onclick=spot12>@spot12value</button>
	<button id="spots" @onclick=spot13>@spot13value</button>
</div>
<div id="start">
	<button id="spots" @onclick=spot21>@spot21value</button>
	<button id="spots" @onclick=spot22>@spot22value</button>
	<button id="spots" @onclick=spot23>@spot23value</button>
</div>
<div id="start">
	<button id="spots" @onclick=spot31>@spot31value</button>
	<button id="spots" @onclick=spot32>@spot32value</button>
	<button id="spots" @onclick=spot33>@spot33value</button>
</div>

<br />

<p id="start">@game_info</p>

<br />

<div id="start">
	<button @onclick=leavetoroomlist>Leave to room list</button>
</div>

@code {
	public string opponent_info { get; set; } = "";
	public string opponent { get; set; } = "";
	public string game_info { get; set; } = "";

	public string spot11value { get; set; } = "";
	public string spot12value { get; set; } = "";
	public string spot13value { get; set; } = "";
	public string spot21value { get; set; } = "";
	public string spot22value { get; set; } = "";
	public string spot23value { get; set; } = "";
	public string spot31value { get; set; } = "";
	public string spot32value { get; set; } = "";
	public string spot33value { get; set; } = "";

	private static System.Timers.Timer _timer;
	private int counter = 300;

	protected override void OnAfterRender(bool firstRender) {
		opponent_info = db.opponent_info;
		opponent = db.opponent_name;
		game_info = db.game_info;

		spot11value = db.spot11;
		spot12value = db.spot12;
		spot13value = db.spot13;
		spot21value = db.spot21;
		spot22value = db.spot22;
		spot23value = db.spot23;
		spot31value = db.spot31;
		spot32value = db.spot32;
		spot33value = db.spot33;

		if (firstRender) {
			StartTimer();

			if (db.room_owner == 1) {
				Thread spin = new Thread(new ThreadStart(db.waitForOpponent));
				spin.Start();
			}
			else {
				Thread spin = new Thread(new ThreadStart(db.waitForNextMove));
				spin.Start();
			}
		}
	}

	public void StartTimer() {
		_timer = new System.Timers.Timer(1000);
		_timer.Elapsed += CountDownTimer;
		_timer.Enabled = true;
	}

	public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e) {
		if (counter > 0) {
			counter -= 1;
		}
		else {
			_timer.Enabled = false;
		}

		await InvokeAsync(async () => {
			StateHasChanged();
		});
	}

	public void Dispose() {
		_timer?.Dispose();
	}

	public void spot11() {
		db.spot11Click();
	}

	public void spot12() {
		db.spot12Click();
	}

	public void spot13() {
		db.spot13Click();
	}

	public void spot21() {
		db.spot21Click();
	}

	public void spot22() {
		db.spot22Click();
	}

	public void spot23() {
		db.spot23Click();
	}

	public void spot31() {
		db.spot31Click();
	}

	public void spot32() {
		db.spot32Click();
	}

	public void spot33() {
		db.spot33Click();
	}

	public void leavetoroomlist() {
		db.moveToRoomList();

		NavManager.NavigateTo("/room_list");
	}
}
